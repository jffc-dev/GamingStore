generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_URL")
}

model cart {
  user_id       String        @id @db.Uuid
  customer_user customer_user @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  cart_detail   cart_detail[]
}

model cart_detail {
  user_id    String    @db.Uuid
  product_id String    @db.Uuid
  quantity   Int?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  product    product   @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  cart       cart      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, product_id])
}

model category {
  category_id      String             @id @db.Uuid
  name             String?            @db.VarChar(100)
  description      String?
  is_deleted       Boolean?           @default(false)
  created_at       DateTime?          @default(now())
  updated_at       DateTime?          @default(now())
  deleted_at       DateTime?          @default(now())
  product_category product_category[]
}

model customer_user {
  user_id                   String          @id @db.Uuid
  role                      user_roles_enum
  email                     String          @unique
  phone_number              String?
  password                  String?
  address                   String?
  reset_password_token      String?
  is_deleted                Boolean?        @default(false)
  reset_password_expires_at DateTime?       @db.Timestamp(6)
  created_at                DateTime?       @default(now())
  updated_at                DateTime?       @default(now())
  deleted_at                DateTime?       @default(now())
  cart                      cart?
  notification              notification[]
  order                     order[]
  product_like              product_like[]
}

model notification {
  notification_id String                  @id @db.Uuid
  user_id         String                  @db.Uuid
  title           String                  @db.VarChar(200)
  description     String?
  priority        priority_enum           @default(NORMAL)
  status          status_enum?            @default(UNREAD)
  type            notification_type_enum? @default(EMAIL)
  created_at      DateTime?               @default(now()) @db.Timestamp(6)
  send_at         DateTime?               @db.Timestamp(6)
  read_at         DateTime?               @db.Timestamp(6)
  customer_user   customer_user           @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model order {
  order_id      String            @id @db.Uuid
  status        order_status_enum
  user_id       String            @db.Uuid
  total         Decimal?          @db.Decimal
  is_deleted    Boolean?          @default(false)
  created_at    DateTime?         @default(now())
  updated_at    DateTime?         @default(now())
  deleted_at    DateTime?         @default(now())
  customer_user customer_user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  order_detail  order_detail[]
  payment       payment[]
}

model order_detail {
  order_detail_id Int      @id
  order_id        String   @db.Uuid
  product_id      String   @db.Uuid
  quantity        Int?
  unit_price      Decimal? @db.Decimal(12, 2)
  subtotal        Decimal? @db.Decimal
  order           order    @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction)
  product         product  @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
}

model payment {
  payment_id        String              @id @db.Uuid
  order_id          String              @db.Uuid
  stripe_payment_id String              @unique @db.VarChar(255)
  amount            Decimal             @db.Decimal(10, 2)
  currency          String
  status            payment_status_enum @default(PENDING)
  payment_at        DateTime?           @db.Timestamptz(3)
  created_at        DateTime?           @default(now())
  updated_at        DateTime?           @default(now())
  order             order               @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction)
}

model product {
  product_id       String             @id @db.Uuid
  name             String             @db.VarChar(100)
  description      String?
  stock            Decimal?           @db.Decimal
  is_active        Boolean?           @default(true)
  price            Decimal            @db.Decimal(10, 2)
  is_deleted       Boolean?           @default(false)
  created_at       DateTime?          @default(now())
  updated_at       DateTime?          @default(now())
  deleted_at       DateTime?          @default(now())
  cart_detail      cart_detail[]
  order_detail     order_detail[]
  product_category product_category[]
  product_image    product_image[]
  product_like     product_like[]
}

model product_category {
  product_id  String   @db.Uuid
  category_id String   @db.Uuid
  category    category @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  product     product  @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([product_id, category_id])
}

model product_image {
  product_image_id String  @id @db.Uuid
  product_id       String  @db.Uuid
  url              String
  product          product @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
}

model product_like {
  product_id    String        @db.Uuid
  user_id       String        @db.Uuid
  created_at    DateTime?     @default(now())
  product       product       @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  customer_user customer_user @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([product_id, user_id])
}

enum notification_type_enum {
  EMAIL
  SMS
  WHATSAPP
}

enum order_status_enum {
  PAID
  PENDING
}

enum payment_status_enum {
  PAID
  PENDING
  FAILED
}

enum priority_enum {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum status_enum {
  READ
  UNREAD
}

enum user_roles_enum {
  MANAGER
  CLIENT
}

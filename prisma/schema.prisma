generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_URL")
}

model CartDetail {
  userId                  String                    @db.Uuid @map("user_id")
  productId               String                    @db.Uuid @map("product_id")
  quantity                Int?                
  createdAt               DateTime?                 @default(now()) @map("created_at")
  updatedAt               DateTime?                 @updatedAt @map("updated_at")
  product                 Product                   @relation(fields: [productId], references: [productId], onDelete: NoAction, onUpdate: NoAction)
  user                    User                      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, productId])
  @@map("cart_detail")
}

model Category {
  categoryId              String                    @id @db.Uuid @map("category_id")
  name                    String?                   @db.VarChar(100)
  description             String?       
  isDeleted               Boolean?                  @default(false) @map("is_deleted")
  createdAt               DateTime?                 @default(now()) @map("created_at")
  updatedAt               DateTime?                 @updatedAt @map("updated_at")
  deletedAt               DateTime?                 @map("deleted_at")
  productCategories       ProductCategory[] 

  @@map("category")
}

model User {
  userId                  String                    @id @db.Uuid @map("user_id")
  role                    user_roles_enum           @default(CLIENT)
  email                   String                    @unique
  name                    String                    @db.VarChar(100)
  lastName                String                    @db.VarChar(100) @map("last_name")
  phoneNumber             String?                   @map("phone_number")
  password                String?         
  address                 String?         
  resetPasswordToken      String?                   @map("reset_password_token")
  isDeleted               Boolean?                  @default(false) @map("is_deleted")
  resetPasswordExpiresAt  DateTime?                 @db.Timestamp(6) @map("reset_password_expires_at")
  createdAt               DateTime?                 @default(now()) @map("created_at")
  updatedAt               DateTime?                 @updatedAt @map("updated_at")
  deletedAt               DateTime?                 @map("deleted_at")
  cart                    CartDetail[]
  notifications           Notification[]  
  orders                  Order[]         
  productLikes            ProductLike[]   

  @@map("customer_user")
}

model Notification {
  notificationId          String                    @id @db.Uuid @map("notification_id")
  userId                  String                    @db.Uuid @map("user_id")
  title                   String                    @db.VarChar(200)
  description             String? 
  priority                priority_enum             @default(NORMAL)
  status                  status_enum?              @default(UNREAD)
  type                    notification_type_enum?   @default(EMAIL)
  createdAt               DateTime?                 @default(now()) @db.Timestamp(6) @map("created_at")
  sendAt                  DateTime?                 @db.Timestamp(6) @map("send_at")
  readAt                  DateTime?                 @db.Timestamp(6) @map("read_at")
  user                    User                      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@map("notification")
}

model Order {
  orderId                 String                    @id @db.Uuid @map("order_id")
  status                  order_status_enum       
  userId                  String                    @db.Uuid @map("user_id")
  total                   Decimal?                  @db.Decimal
  isDeleted               Boolean?                  @default(false) @map("is_deleted")
  createdAt               DateTime?                 @default(now()) @map("created_at")
  updatedAt               DateTime?                 @updatedAt @map("updated_at")
  deletedAt               DateTime?                 @map("deleted_at")
  user                    User                      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  orderDetails            OrderDetail[]     
  payments                Payment[]         

  @@map("order")
}

model OrderDetail {
  orderDetailId           Int                       @id @map("order_detail_id")
  orderId                 String                    @db.Uuid @map("order_id")
  productId               String                    @db.Uuid @map("product_id")
  quantity                Int?                  
  unitPrice               Decimal?                  @db.Decimal(12, 2) @map("unit_price")
  subtotal                Decimal?                  @db.Decimal
  order                   Order                     @relation(fields: [orderId], references: [orderId], onDelete: NoAction, onUpdate: NoAction)
  product                 Product                   @relation(fields: [productId], references: [productId], onDelete: NoAction, onUpdate: NoAction)

  @@map("order_detail")
}

model Payment {
  paymentId               String                    @id @db.Uuid @map("payment_id")
  orderId                 String                    @db.Uuid @map("order_id")
  stripePaymentId         String                    @unique @db.VarChar(255) @map("stripe_payment_id")
  amount                  Decimal                   @db.Decimal(10, 2)
  currency                String      
  status                  payment_status_enum       @default(PENDING)
  paymentAt               DateTime?                 @db.Timestamptz(3) @map("payment_at")
  createdAt               DateTime?                 @default(now()) @map("created_at")
  updatedAt               DateTime?                 @updatedAt @map("updated_at")
  order                   Order                     @relation(fields: [orderId], references: [orderId], onDelete: NoAction, onUpdate: NoAction)

  @@map("payment")
}

model Product {
  productId               String                    @id @db.Uuid @map("product_id")
  name                    String                    @db.VarChar(100)
  description             String?       
  stock                   Decimal?                  @db.Decimal
  isActive                Boolean?                  @default(true) @map("is_active")
  price                   Decimal                   @db.Decimal(10, 2)
  isDeleted               Boolean?                  @default(false) @map("is_deleted")
  createdAt               DateTime?                 @default(now()) @map("created_at")
  updatedAt               DateTime?                 @updatedAt @map("updated_at")
  deletedAt               DateTime?                 @map("deleted_at")
  cartDetails             CartDetail[]       
  orderDetails            OrderDetail[]      
  productCategories       ProductCategory[] 
  productImages           ProductImage[]     
  productLikes            ProductLike[]      

  @@map("product")
}

model ProductCategory {
  productId               String                    @db.Uuid @map("product_id")
  categoryId              String                    @db.Uuid @map("category_id")
  category                Category                  @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction)
  product                 Product                   @relation(fields: [productId], references: [productId], onDelete: NoAction, onUpdate: NoAction)

  @@id([productId, categoryId])
  @@map("product_category")
}

model ProductImage {
  productImageId          String                    @id @db.Uuid @map("product_image_id")
  productId               String                    @db.Uuid @map("product_id")
  url                     String                  
  product                 Product                   @relation(fields: [productId], references: [productId], onDelete: NoAction, onUpdate: NoAction)

  @@map("product_image")
}

model ProductLike {
  productId               String                    @db.Uuid @map("product_id")
  userId                  String                    @db.Uuid @map("user_id")
  createdAt               DateTime?                 @default(now()) @map("created_at")
  product                 Product                   @relation(fields: [productId], references: [productId], onDelete: NoAction, onUpdate: NoAction)
  user                    User                      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([productId, userId])
  @@map("product_like")
}

enum notification_type_enum {
  EMAIL
  SMS
  WHATSAPP
}

enum order_status_enum {
  PAID
  PENDING
}

enum payment_status_enum {
  PAID
  PENDING
  FAILED
}

enum priority_enum {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum status_enum {
  READ
  UNREAD
}

enum user_roles_enum {
  MANAGER
  CLIENT
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_URL")
}

model CartDetail {
  userId    String    @map("user_id") @db.Uuid
  productId String    @map("product_id") @db.Uuid
  quantity  Int?
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [productId], onDelete: NoAction, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, productId])
  @@map("cart_detail")
}

model Category {
  categoryId        String            @id @map("category_id") @db.Uuid
  name              String?           @db.VarChar(100)
  description       String?
  isDeleted         Boolean?          @default(false) @map("is_deleted")
  createdAt         DateTime?         @default(now()) @map("created_at")
  updatedAt         DateTime?         @updatedAt @map("updated_at")
  deletedAt         DateTime?         @map("deleted_at")
  productCategories ProductCategory[]

  @@map("category")
}

model User {
  userId                 String          @id @map("user_id") @db.Uuid
  role                   user_roles_enum @default(CLIENT)
  email                  String          @unique
  name                   String          @db.VarChar(100)
  lastName               String          @map("last_name") @db.VarChar(100)
  phoneNumber            String?         @map("phone_number")
  password               String?
  address                String?
  resetPasswordToken     String?         @unique @map("reset_password_token")
  isDeleted              Boolean?        @default(false) @map("is_deleted")
  resetPasswordExpiresAt DateTime?       @map("reset_password_expires_at") @db.Timestamp(6)
  createdAt              DateTime?       @default(now()) @map("created_at")
  updatedAt              DateTime?       @updatedAt @map("updated_at")
  deletedAt              DateTime?       @map("deleted_at")
  cart                   CartDetail[]
  notifications          Notification[]
  orders                 Order[]
  productLikes           ProductLike[]

  @@map("customer_user")
}

model Notification {
  notificationId String                  @id @map("notification_id") @db.Uuid
  userId         String                  @map("user_id") @db.Uuid
  title          String                  @db.VarChar(200)
  description    String?
  priority       priority_enum           @default(NORMAL)
  status         status_enum?            @default(UNREAD)
  type           notification_type_enum? @default(EMAIL)
  createdAt      DateTime?               @default(now()) @map("created_at") @db.Timestamp(6)
  sendAt         DateTime?               @map("send_at") @db.Timestamp(6)
  readAt         DateTime?               @map("read_at") @db.Timestamp(6)
  user           User                    @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@map("notification")
}

model Order {
  orderId      String            @id @map("order_id") @db.Uuid
  status       order_status_enum
  userId       String            @map("user_id") @db.Uuid
  total        Decimal?          @db.Decimal
  isDeleted    Boolean?          @default(false) @map("is_deleted")
  createdAt    DateTime?         @default(now()) @map("created_at")
  updatedAt    DateTime?         @updatedAt @map("updated_at")
  deletedAt    DateTime?         @map("deleted_at")
  user         User              @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  orderDetails OrderDetail[]
  payments     Payment[]

  @@map("order")
}

model OrderDetail {
  orderDetailId Int      @map("order_detail_id")
  orderId       String   @map("order_id") @db.Uuid
  productId     String   @map("product_id") @db.Uuid
  quantity      Int?
  unitPrice     Decimal? @map("unit_price") @db.Decimal(12, 2)
  subtotal      Decimal? @db.Decimal
  order         Order    @relation(fields: [orderId], references: [orderId], onDelete: NoAction, onUpdate: NoAction)
  product       Product  @relation(fields: [productId], references: [productId], onDelete: NoAction, onUpdate: NoAction)

  @@id([orderId, orderDetailId])
  @@map("order_detail")
}

model Payment {
  paymentId       String              @id @map("payment_id") @db.Uuid
  orderId         String              @map("order_id") @db.Uuid
  stripePaymentId String              @unique @map("stripe_payment_id") @db.VarChar(255)
  amount          Decimal             @db.Decimal(10, 2)
  currency        String
  status          payment_status_enum @default(PENDING)
  paymentAt       DateTime?           @map("payment_at") @db.Timestamptz(3)
  createdAt       DateTime?           @default(now()) @map("created_at")
  updatedAt       DateTime?           @updatedAt @map("updated_at")
  order           Order               @relation(fields: [orderId], references: [orderId], onDelete: NoAction, onUpdate: NoAction)

  @@map("payment")
}

model Product {
  productId         String            @id @map("product_id") @db.Uuid
  name              String            @db.VarChar(100)
  description       String?
  stock             Decimal?          @db.Decimal
  isActive          Boolean?          @default(true) @map("is_active")
  price             Decimal           @db.Decimal(10, 2)
  isDeleted         Boolean?          @default(false) @map("is_deleted")
  createdAt         DateTime?         @default(now()) @map("created_at")
  updatedAt         DateTime?         @updatedAt @map("updated_at")
  deletedAt         DateTime?         @map("deleted_at")
  cartDetails       CartDetail[]
  orderDetails      OrderDetail[]
  productCategories ProductCategory[]
  productImages     ProductImage[]
  productLikes      ProductLike[]

  @@map("product")
}

model ProductCategory {
  productId  String   @map("product_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  category   Category @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction)
  product    Product  @relation(fields: [productId], references: [productId], onDelete: NoAction, onUpdate: NoAction)

  @@id([productId, categoryId])
  @@map("product_category")
}

model ProductImage {
  productImageId String    @id @map("product_image_id") @db.Uuid
  productId      String    @map("product_id") @db.Uuid
  url            String
  createdAt      DateTime? @default(now()) @map("created_at")
  product        Product   @relation(fields: [productId], references: [productId], onDelete: NoAction, onUpdate: NoAction)

  @@map("product_image")
}

model ProductLike {
  productId String    @map("product_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at")
  product   Product   @relation(fields: [productId], references: [productId], onDelete: NoAction, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([productId, userId])
  @@map("product_like")
}

enum notification_type_enum {
  EMAIL
  SMS
  WHATSAPP
}

enum order_status_enum {
  PAID
  PENDING
}

enum payment_status_enum {
  PAID
  PENDING
  FAILED
}

enum priority_enum {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum status_enum {
  READ
  UNREAD
}

enum user_roles_enum {
  MANAGER
  CLIENT
}
